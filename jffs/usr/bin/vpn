#!/bin/sh

########################################################################
#                                                                      #
#   VPN connector script v3.01                                         #
#   (c) by Tobse (cthullu@protonmail.com) in 2017                      #
#                                                                      #
#   This script must be located on a USB stick, mounted on /jffs and   #
#   expects the presence of the speed check script in /jffs/usr/bin/.  #
#   All scripts must be "chmod ugo+x" in order to be executable.       #
#   The script also expects the presence of the prepared VPN           #
#   configuration files, sorted into directories at the defined        #
#   config files directory, containing the files ca.crt,               #
#   openvpn.conf and ta.key. See the files with these names at         #
#   /tmp/openvpncl for the syntax.                                     #
#                                                                      #
########################################################################

# load config
DIRNAME="$( cd "$( dirname "$0" )" && pwd )"
source $DIRNAME/config

# check if system supports curl command
CURLSUPPORTED=yes
RESULT=`command -v curl`
if [ "$RESULT" == "" ]; then
  CURLSUPPORTED=no
fi

# kill all speedcheck scripts
killall -q speedcheck

# get command line parameter
PARAM1="$1"

# check for empty parameter 1
if [ "$PARAM1" == "" ]; then
  echo Please a server directory as parameter from the following list:
  ls $CONFIGFILESDIR
  echo If you\'re not sure which one to pick, just use "rnd" to pick a random server
  exit 1
fi

# check for wrong parameter 1
if [ "$PARAM1" != "rnd" ]; then
  if [ ! -d "$CONFIGFILESDIR/$PARAM1/" ]; then
    echo Directory $CONFIGFILESDIR/$PARAM1/ doesn\'t exist.
    exit 1
  fi
fi

RETRIESDONE=0
while [[ $RETRIESDONE -lt $MAXTRIES ]]; do
  # if parameter 1 is "rnd" user wants a random server
  # read server configuration directories
  if [ "$1" == "rnd" ]; then
    SERVERDIRS=`find $CONFIGFILESDIR/ -type d`

    # count amount of directories
    AMT=0
    for SERVERDIR in $SERVERDIRS ; do
      if [ "$SERVERDIR" != "$CONFIGFILESDIR/" ]; then
        let AMT=$AMT+1
      fi
    done

    # generate random number
    # between 1 and amount of server directories
    RND=`awk -v min=1 -v max=$AMT 'BEGIN{srand(); print int(min+rand()*(max-min+1))}'`

    # now pick #$RND from list
    CNT=0
    for SERVERDIR in $SERVERDIRS ; do
      if [ "$SERVERDIR" != "$CONFIGFILESDIR/" ]; then
        let CNT=$CNT+1
      fi
      if [ $CNT -eq $RND ]; then
        SERVER=`echo $SERVERDIR | sed "s|$CONFIGFILESDIR/||g"`
        PARAM1=$SERVER
      fi
    done
  fi

  # init
  let TRYNUMBER=$RETRIESDONE+1
  echo This is try \#$TRYNUMBER of $MAXTRIES.
  echo Connecting to server $PARAM1.
  OLDIP=`wget -t 3 -T 10 -q -O - http://ipinfo.io/ip`
  NEWIP=$OLDIP

  # check if we're connected to the VPN
  VPNROUTE=`route -n | grep $VPNINTERFACE`
  if [ "$VPNROUTE" == "" ]; then
    echo We\'re not connected to the VPN.
  else
    # drop the VPN
    echo Current IPv4 is $OLDIP
    CNT=0
    killall openvpn
    printf "Waiting for the VPN to drop."
    while [ $CNT -le $DROPTIMEOUT ] && [ "$NEWIP" == "$OLDIP" ]
    do
      sleep 1
      let CNT=$CNT+1
      printf "."
      NEWIP=$OLDIP
      VPNROUTE=`route -n | grep $VPNINTERFACE`
      if [ "$VPNROUTE" == "" ]; then
        NEWIP=`wget -t 3 -T 10 -q -O - http://ipinfo.io/ip`
      fi
    done
    echo ""
  fi
  echo Current IPv4 is $NEWIP.

  # copy given server files and restart the VPN
  cp $CONFIGFILESDIR/$PARAM1/* /tmp/openvpncl/
  chmod og-r /tmp/openvpncl/*
  OPENVPNLOG_OLD=
  LASTLOGLINE=`tail -n1 $VPNLOG`
  openvpn --config /tmp/openvpncl/openvpn.conf --route-up /tmp/openvpncl/route-up.sh --log $VPNLOG --daemon

  # wait for new IPv4
  OLDIP=$NEWIP
  CNT=0
  SLEEP=1
  echo "Waiting for the VPN to come up:"
  echo ""
  while [ $CNT -le $CONNECTIONTIMEOUT ] && [ "$NEWIP" == "$OLDIP" ]
  do
    sleep $SLEEP
    let CNT=$CNT+1
    OPENVPNLOG_NEW=`cat $VPNLOG`
    if [ "$OPENVPNLOG_NEW" != "$OPENVPNLOG_OLD" ]; then
      FOUNDLINE="no"
      while read LINE; do
        if [ "$LINE" == "$LASTLOGLINE" ]; then
          FOUNDLINE="yes"
        fi
        if [ "$FOUNDLINE" == "yes" ] && [ "$LINE" != "$LASTLOGLINE" ]; then
          echo $LINE
        fi
      done < $VPNLOG
      if [ "$FOUNDLINE" == "no" ]; then
        echo "${OPENVPNLOG_NEW}"
      fi
    fi
    OPENVPNLOG_OLD=$OPENVPNLOG_NEW
    LASTLOGLINE=`tail -n1 $VPNLOG`
    NEWIP=$OLDIP
    VPNROUTE=`route -n | grep $VPNINTERFACE`
    if [ "$VPNROUTE" != "" ]; then
      NEWIP=`wget -t 3 -T 10 -q -O - http://ipinfo.io/ip`
    fi
  done

  # echo new IPv4, city and country
  echo ""
  if [ "$NEWIP" == "$OLDIP" ]; then
    echo IPv4 hasn\'t changed.
    VPNROUTE=`route -n | grep $VPNINTERFACE`
    if [ "$VPNROUTE" == "" ]; then
      echo "Houston, we have a problem. Connecting to exit node $PARAM1 has failed."
      echo
      echo
    fi
  else
    echo Current server is $PARAM1.
    echo $PARAM1 > $CURRENTSERVERFILE
    echo New IPv4 is $NEWIP.
    if [ "$CURLSUPPORTED" == "yes" ]; then
      CITY=$(curl --connect-timeout 3 -ks https://ipinfo.io/city)
    else
      CITY=`wget -t 3 -T 10 -q -O - http://ipinfo.io/city`
    fi
    if [ "$CITY" == "" ]; then
      CITY="an unknown city"
    fi
    if [ "$CURLSUPPORTED" == "yes" ]; then
      REGION=$(curl --connect-timeout 3 -ks https://ipinfo.io/region)
    else
      REGION=`wget -t 3 -T 10 -q -O - http://ipinfo.io/region`
    fi
    if [ "$REGION" == "" ]; then
      REGION="region unknown"
    fi
    if [ "$CURLSUPPORTED" == "yes" ]; then
      ISPN=$(curl --connect-timeout 3 -ks https://ipinfo.io/org)
    else
      ISP=`wget -t 3 -T 10 -q -O - http://ipinfo.io/org`
    fi
    if [ "$ISP" == "" ]; then
      ISP="an unknown ISP"
    fi
    if [ "$CURLSUPPORTED" == "yes" ]; then
      COUNTRYCODE=$(curl --connect-timeout 3 -ks https://ipinfo.io/country)
    else
      COUNTRYCODE=`wget -t 3 -T 10 -q -O - http://ipinfo.io/country`
    fi
    echo $COUNTRYCODE > $CURRENTCOUNTRYFILE
    if [ "$COUNTRYCODE" == "" ]; then
      COUNTRY="country unknown"
    else
      if [ ! -f "$JFFSPATH/$COUNTRIESJSON" ]; then
        wget -q http://country.io/names.json -P $JFFSPATH -O $COUNTRIESJSON
      fi
      COUNTRY=`cat $JFFSPATH/$COUNTRIESJSON | grep -E -o "\"$COUNTRYCODE\": \"[^\\"]{3,}\"" | grep -E -o '[^\"]{3,}'`
    fi
    echo New geolocation is $CITY, region $REGION, $COUNTRY.
    echo Our end service provider is $ISP.
    RETRIESDONE=$MAXTRIES
    $SPEEDTESTSCRIPT
  fi
  let RETRIESDONE=$RETRIESDONE+1
done

echo Rebooting router.
reboot